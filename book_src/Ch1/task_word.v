task的定义：                
task<任务名>;              // <=  task task_id;           
  <端口及数据类型声明语句> // <=    [declaration]       
  <语句1>                  // <=    procedural_statement
  <语句2>                  // <=    procedural_statement
   .....                   // <=
  <语句n>                  // <=    procedural_statement
endtask                    // <=  endtask 
                             
task 的调用及变量的传递
<任务名>(端口1,端口2,...,端口n);

task可以启动其他的task，其他的task又可以启动别的task，可以启动的task是没有限制的，只有当所有的task都完成之后，控制才能返回。任务可以没有或者有多个输入输出类型的变量。

task find_max;      //任务定义结构开头，命名为 find_max
 input  [15:0] x,y; //输入端口说明
 output [15:0] tmp; //输出端口说明

 if(x>y)            //给出任务定义的描述语句
   tmp = x;
 else
   tmp = y;

endtask 

在第一行“task”语句中不能列出端口名称。
任务的输入、输出端口和双向端口数量不受限制，甚至可以没有输入、输出以及双向端口。
在任务定义的描述语句中，可以使用出现不可综合操作符合语句（使用最为频繁的就是延迟控制语句，例如#10ns），但这样会造成该任务不可综合。
在任务中可以调用其他的任务或函数，也可以调用自身。
在任务定义结构内不能出现 initial和 always过程块。
在任务定义中可以出现“disable 中止语句” ，将中断正在执行的任务，但其是不可综合的。当任务被中断后，程序流程将返回到调用任务的地方继续向下执行。

在调用任务时，需要注意以下几点：
任务调用语句只能出现在过程块内。
任务调用语句和一条普通的行为描述语句的处理方法一致。
当被调用输入、输出或双向端口时，任务调用语句必须包含端口名列表，且信号端口顺序和类型必须和任务定义结构中的顺序和类型一致。需要说明的是，任务的输出端口必须和寄存器类型的数据变量对应。
可综合任务只能实现组合逻辑，也就是说调用可综合任务的时间为“0” 。而在面向仿真的任务中可以带有时序控制，如时延，因此面向仿真的任务的调用时间不为“0” 。
